一。冯诺依曼结构
	cpu，存储器，内存，输入设备，输出设备
	cpu 不能直接访问数据《控制信号数据除外》
	访问速度：cpu 内存 外存 硬盘
	存储空间：。。。。
二。操作系统
	包括：内核，其他程序。
	系统有：服务器端操作系统，界面操作系统。
	作用：用来管理所有的硬件和软件的软件，提供稳定的运行环境。
	层级结构：
		应用程序
		库函数（实现调用简单化）
		系统调用（system call）（提供接口给人们用，复杂）
	    操作系统内核
	    硬件驱动
	    硬件设备
	进程
		1.定义：进程是一个应用程序运行时的实例。
		2.任务管理器中的都是进程，
		3.看liunx下的进程ps aus | grep vim(看vim的进程)
			ps aus | grep vim | grep -v grep(去掉包含grep进程的进程列表)
		4.进程和可执行程序的区别
			课堂延伸：
				Ctrl+r:找到以前敲过的命令
				vim ~/.bashrc 将常用的命令用自己熟悉的简写代替《alias cl="clear":用cl命令代替clear》
			进程被加载到内存中/可执行文件在磁盘上，两个无关
		5.PCB进程控制块
			liunx下叫 task_struct 描述进程的结构体
		6.task_struct内容分类  *****
			理解task_struct和他的字段及其含义.
			四核：四个cpu.
			标识符：描述本进程的唯一标示符，用来区别其他进程。
			状态：任务状态，退出代码，退出信号等。
			优先级：相对于其他进程的优先级。
			程序计数器：程序中即将被执行的下一条指令的地址。
			内存指针：包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针。
			上下文数据：进程执行时处理器的寄存器中的数据。
			I/O状态信息：包括显示的I/O请求，分配给进程的I/O设备和正在被进程使用的文件列表。
			记账信息：可能包括处理器时间总和，使用的时钟总数，时间限制，记账号等。
			其他信息：
		7.组织进程
			组织有双向链表，
			getid()返回当前进程的PID
			ps aus (init 第一个进程)
		8.fork()创建一个进程（父进程返回子进程的PID）（子进程返回0）（内存指针中的代码共用）（pc指针指向同一个地址。拷贝。{同一处开始运行}）
			父进程和子进程谁先执行不确定，由操作系统决定
		9.进程状态
			七种状态；
				R:(running)就绪
				S:(sleeping)等待
				D:(disk sleep)阻塞
				T:(stopped)
				t:(tracting stop)
				X:(dead)
				Z:(zombie)僵尸状态
大神总结：http://blog.csdn.net/lf_2016/article/details/54347820
