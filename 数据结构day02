复习上节课

作业题
	斐波拉契数列时间复杂度，空间复杂度，咋优化
		时间复杂度：O(2^N)
		重复元素计算次数太多。
		空间复杂度：O(N)

循环实现Fib数列 最优方法
	时间复杂度：O(N)
	空间复杂度；O(1)
	
第二种递归实现Fib
	 long long Fib(long long first,long long second, long long N)
	 {
		if(N<3)
			return 1;
		if(N==3)
			return first+second;
		return Fib(second,second+first,N-1);
	 }
	 时间复杂度：O(N-2)~O(N)
	 空间复杂度：O(1*N)~o(N)---->
	 尾递归：
		优势：时间复杂度;O(1)--->迭代
作业题：
全排列
#include<iostream>
using namespace std;
void Parm(int *array,int size,int N)
{
	if(N==size)
	{
		for(int i=0;i<size;i++)
			cout<<array[i]<<"  ";
		cout<<endl;
	}
	else
	{
		for(int i=N;i<size;i++)
		{
			swap(array[i],array[N]);
			Parm(array,size,N+1);
			swap(array[i],array[N]);
		}
	}
}
int main()
{
	int array[]={1,2,3,4,5,6};
	Parm(array,sizeof(array)/sizeof(array[0]),2);
	return 0;
}
功能：全排列：给定N(N<size)值，将数组中的后N位的组合全部列出来
时间复杂度：
空间复杂度

栈(先入后出):LIFO

vector/////stack////顺序表

作业题；
	template<class T>
	class Stack
	{};





